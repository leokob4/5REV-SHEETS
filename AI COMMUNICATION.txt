CREATED RESOURCES ON ROOT WITH FILE W3.CSS

LOGIN AND DASHBOARD.HTML NOT WORKING AS INTENDED.
implement py gui locally:
previous code to edit and change DB refs to our excel, analyze what other sheets we have to create:
allow use of javascript only for our web based gui always use resources folder for .js

Created JSON FOLDER ON ROOT FOR POSSIBLE FUTURE INTEGRATIONS
{
from PyQt5.QtWidgets import (
    QMainWindow, QToolBar, QAction, QTabWidget, QMenu, QToolButton,
    QWidget, QVBoxLayout, QSplitter, QTreeWidget, QTreeWidgetItem,
    QLabel, QLineEdit, QPushButton, QHBoxLayout, QMessageBox, QFileDialog
)
from PyQt5.QtCore import Qt

from services.api import login, get_current_user_info
from ui.tools.product_data import ProductDataWidget
from ui.tools.bom_manager import BOMManagerWidget
from ui.tools.change_mgmt import ChangeMgmtWidget
from ui.tools.analytics import AnalyticsWidget
from ui.tools.user_role_manager import RoleManagerWidget
from ui.tools.cad_viewer import CADViewerWidget  # type: ignore


# === LOGIN WINDOW ===
class LoginWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("5revolution Login")
        self.setGeometry(400, 200, 300, 180)
        layout = QVBoxLayout()

        self.username = QLineEdit()
        self.username.setPlaceholderText("Username")
        self.password = QLineEdit()
        self.password.setPlaceholderText("Password")
        self.password.setEchoMode(QLineEdit.Password)

        login_btn = QPushButton("Login")
        login_btn.clicked.connect(self.authenticate)

        register_btn = QPushButton("Register")
        register_btn.clicked.connect(self.fake_register)

        layout.addWidget(QLabel("Welcome to 5revolution"))
        layout.addWidget(self.username)
        layout.addWidget(self.password)

        btns = QHBoxLayout()
        btns.addWidget(login_btn)
        btns.addWidget(register_btn)

        layout.addLayout(btns)
        self.setLayout(layout)

    def authenticate(self):
        result = login(self.username.text(), self.password.text())
        if result.status_code == 200:
            self.main = TeamcenterStyleGUI()
            self.main.show()
            self.close()
        elif result.status_code == 503:
            QMessageBox.critical(self, "Connection Error", "Backend API is not running on http://localhost:8000")
        else:
            QMessageBox.warning(self, "Login Failed", "Invalid username or password.")

    def fake_register(self):
        QMessageBox.information(self, "Register", "Registration is not implemented in this mockup.")


# === MAIN GUI ===
class TeamcenterStyleGUI(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("5revolution Platform")
        self.setGeometry(100, 100, 1280, 800)
        self.role = get_current_user_info()["role"]

        self._create_toolbar()
        self._create_main_layout()

    def _create_toolbar(self):
        self.toolbar = QToolBar("Main Toolbar")
        self.toolbar.setMovable(False)
        self.addToolBar(Qt.TopToolBarArea, self.toolbar)

        # üõ† Tools menu
        self.tools_btn = QToolButton()
        self.tools_btn.setText("üõ† Tools")
        self.tools_btn.setPopupMode(QToolButton.InstantPopup)
        tools_menu = QMenu()

        if self.role in ["admin", "engineer"]:
            tools_menu.addAction("üì¶ Product Data", lambda: self._open_tab("Product Data", ProductDataWidget()))
            tools_menu.addAction("üßæ BOM Manager", lambda: self._open_tab("BOM Manager", BOMManagerWidget()))
            tools_menu.addAction("üîÅ Change Control", lambda: self._open_tab("Change Control", ChangeMgmtWidget()))
            tools_menu.addAction("üßë‚Äçüíº User Roles", lambda: self._open_tab("User Roles", RoleManagerWidget()))

        if self.role in ["admin", "manager", "engineer"]:
            tools_menu.addAction("üìä Analytics", lambda: self._open_tab("Analytics", AnalyticsWidget()))
            tools_menu.addAction("üìê CAD / PDF Viewer", lambda: self._open_tab("Viewer", CADViewerWidget()))

        self.tools_btn.setMenu(tools_menu)
        self.toolbar.addWidget(self.tools_btn)

        # üë§ Profile menu
        self.profile_btn = QToolButton()
        self.profile_btn.setText("üë§ Profile")
        self.profile_btn.setPopupMode(QToolButton.InstantPopup)
        profile_menu = QMenu()
        profile_menu.addAction("‚öôÔ∏è Settings", self._open_options)
        profile_menu.addAction("üîí Logout", self._logout)
        self.profile_btn.setMenu(profile_menu)
        self.toolbar.addWidget(self.profile_btn)

    def _create_main_layout(self):
        self.splitter = QSplitter()

        # üå≥ Left: Tree view
        self.tree = QTreeWidget()
        self.tree.setHeaderLabel("Workspace")
        root = QTreeWidgetItem(["Projects"])
        root.addChild(QTreeWidgetItem(["Demo Project"]))
        root.addChild(QTreeWidgetItem(["Sample Variant"]))
        self.tree.addTopLevelItem(root)
        self.tree.expandAll()

        self.tree.setContextMenuPolicy(Qt.CustomContextMenu)
        self.tree.customContextMenuRequested.connect(self._show_tree_context_menu)

        # üß† Right: Tabbed tools
        self.tabs = QTabWidget()
        self.tabs.setContextMenuPolicy(Qt.CustomContextMenu)
        self.tabs.customContextMenuRequested.connect(self._show_tab_context_menu)

        welcome_tab = QWidget()
        welcome_layout = QVBoxLayout()
        welcome_layout.addWidget(QLabel("Welcome to 5revolution ‚Äì PLM + ERP Suite"))
        welcome_tab.setLayout(welcome_layout)
        self.tabs.addTab(welcome_tab, "Home")

        self.splitter.addWidget(self.tree)
        self.splitter.addWidget(self.tabs)
        self.splitter.setStretchFactor(1, 4)

        container = QWidget()
        layout = QVBoxLayout()
        layout.addWidget(self.splitter)
        container.setLayout(layout)
        self.setCentralWidget(container)

    def _show_tab_context_menu(self, position):
        tab_index = self.tabs.tabBar().tabAt(position)
        if tab_index < 0:
            return

        menu = QMenu()
        close_action = QAction("‚ùå Close Tab", self)
        close_action.triggered.connect(lambda: self.tabs.removeTab(tab_index))

        close_others_action = QAction("üîÅ Close Other Tabs", self)
        close_others_action.triggered.connect(lambda: self._close_other_tabs(tab_index))

        close_all_action = QAction("üßπ Close All Tabs", self)
        close_all_action.triggered.connect(self._close_all_tabs)

        menu.addAction(close_action)
        menu.addAction(close_others_action)
        menu.addAction(close_all_action)

        menu.exec_(self.tabs.mapToGlobal(position))

    def _close_other_tabs(self, keep_index):
        for i in reversed(range(self.tabs.count())):
            if i != keep_index:
                self.tabs.removeTab(i)

    def _close_all_tabs(self):
        self.tabs.clear()

    def _open_tab(self, title, widget):
        for i in range(self.tabs.count()):
            if self.tabs.tabText(i) == title:
                self.tabs.setCurrentIndex(i)
                return
        self.tabs.addTab(widget, title)
        self.tabs.setCurrentIndex(self.tabs.count() - 1)

    def _open_options(self):
        QMessageBox.information(self, "Options", "User settings or preferences will go here.")

    def _logout(self):
        self.close()
        self.login = LoginWindow()
        self.login.show()

    def _show_tree_context_menu(self, position):
        item = self.tree.itemAt(position)
        if item:
            menu = QMenu()
            if item.parent() is None:
                menu.addAction("üîº Refresh Project", self._mock_refresh_project)
                menu.addAction("‚ûï Add Item", lambda: self._open_tab("Product Data", ProductDataWidget()))
            else:
                menu.addAction("üîç View Details", self._mock_view_details)
                menu.addAction("‚ùå Delete", self._mock_delete_item)
            menu.exec_(self.tree.viewport().mapToGlobal(position))

    def _mock_refresh_project(self):
        QMessageBox.information(self, "Info", "Project refreshed (mockup)")

    def _mock_view_details(self):
        QMessageBox.information(self, "View", "Item details shown (mockup)")

    def _mock_delete_item(self):
        QMessageBox.warning(self, "Delete", "Item deleted (mockup)")
}